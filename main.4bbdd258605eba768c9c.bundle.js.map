{"version":3,"file":"main.4bbdd258605eba768c9c.bundle.js","sources":["webpack:///./components/editor/editor.js","webpack:///./components/container/container.js","webpack:///./components/gallery/gallery.js","webpack:///./components/diffelement/diffelement.js","webpack:///./components/button/button.js","webpack:///./components/media/media.js","webpack:///./components/tabs/tabs.js","webpack:///./components/text_conflict/text_conflict.stories.js","webpack:///./components/text_conflict/text_conflict.js","webpack:///./components/text_conflict/text_conflict_option/text_conflict_option.js","webpack:///./components/textfield/textfield.js","webpack:///./components/placeholder/placeholder.js"],"sourcesContent":["import { LitElement, html } from \"lit-element\";\nimport { eventType } from \"./operations\";\nimport Placeholder from \"../placeholder/placeholder\";\nimport text from \"!raw-loader!./templates/text.html\";\nimport added from \"!raw-loader!./templates/added.html\";\nimport removed from \"!raw-loader!./templates/removed.html\";\nimport gallery from \"!raw-loader!./templates/gallery.html\";\nimport image from \"!raw-loader!./templates/image.html\";\nimport columns from \"!raw-loader!./templates/columns.html\";\n\nexport default class Editor extends LitElement {\n  static createElement(name, attributes = {}) {\n    const el = document.createElement(\"div\");\n    el.classList.add(name);\n    if (Editor.templates[name]) {\n      el.innerHTML =\n        Editor.templates[name] instanceof Function\n          ? Editor.templates[name]()\n          : Editor.templates[name];\n    }\n    const element = el.children[0];\n    Object.keys(attributes).forEach(key =>\n      element.setAttribute(key, attributes[key])\n    );\n    return element;\n  }\n\n  render() {\n    return html`\n      <slot></slot>\n    `;\n  }\n\n  static batch({ detail: { operations } }) {\n    operations.forEach(Editor.dispatchOperation);\n  }\n\n  static insertElement({\n    detail: { element, parent, position, reference, attributes }\n  }) {\n    ({\n      end: () => parent.appendChild(Editor.createElement(element, attributes)),\n      before: () =>\n        parent.insertBefore(\n          Editor.createElement(element),\n          parent.children[reference]\n        )\n    }[position]());\n  }\n\n  static moveElement({ detail: { parent, position, target, reference } }) {\n    ({\n      before: () =>\n        parent.insertBefore(\n          parent.children[target],\n          parent.children[reference]\n        ),\n      after: () =>\n        reference < parent.children.length\n          ? parent.insertBefore(\n              parent.children[target],\n              parent.children[reference + 1]\n            )\n          : parent.appendChild(parent.children[reference])\n    }[position]());\n  }\n\n  static replaceElement({ detail: { element, target } }) {\n    target.parentElement.insertBefore(Editor.createElement(element), target);\n    target.parentElement.removeChild(target);\n  }\n\n  static removeElement({ detail: { target } }) {\n    target.parentElement.removeChild(target);\n  }\n\n  static setAttributes({ detail: { target, attr } }) {\n    Object.keys(attr).forEach(key => target.setAttribute(key, attr[key]));\n  }\n\n  static removeAttributeKey({ detail: { target, key } }) {\n    target.removeAttribute(key);\n  }\n\n  static swap({ detail: { source, target } }) {\n    target.parentElement.insertBefore(source, target);\n    target.parentElement.removeChild(target);\n  }\n\n  static dispatchOperation(event) {\n    ({\n      batch: () => Editor.batch(event),\n      insert: () => Editor.insertElement(event),\n      move: () => Editor.moveElement(event),\n      replace: () => Editor.replaceElement(event),\n      swap: () => Editor.swap(event),\n      remove: () => Editor.removeElement(event),\n      attributes: () => Editor.setAttributes(event),\n      removeAttribute: () => Editor.removeAttributeKey(event)\n    }[event.detail.operation]());\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener(eventType, Editor.dispatchOperation, {\n      capture: true\n    });\n  }\n}\n\nEditor.templates = {};\n\nEditor.decorator = story => `<ck-editor>${story()}</ck-editor>`;\n\nEditor.dummySetup = story => {\n  Editor.templates = {\n    text,\n    image: () =>\n      image\n        .replace(\"%width\", 800)\n        .replace(\"%height\", Math.ceil(200 + Math.random() * 200)),\n    gallery: () => gallery.replace(\"%content\", Editor.templates.image()),\n    columns: () => columns,\n    added: () => added,\n    removed: () => removed\n  };\n  Placeholder.availableSections = [\n    { id: \"text\", label: \"Text\", icon: \"text\" },\n    { id: \"image\", label: \"Image\", icon: \"image\" },\n    { id: \"gallery\", label: \"Gallery\", icon: \"carousel\" },\n    { id: \"columns\", label: \"Columns\", icon: \"misc\" }\n  ];\n  return story();\n};\n\ncustomElements.define(\"ck-editor\", Editor);\n","import { LitElement, html, svg, customElement, css } from \"lit-element\";\nimport DiffElement from \"../diffelement/diffelement\";\nimport * as Operations from \"../editor/operations\";\nimport iconUp from \"./icons/up.svg\";\nimport iconDown from \"./icons/down.svg\";\nimport iconDelete from \"./icons/delete.svg\";\nimport itemStyles from \"./container-item.css\";\n\nclass ContainerItem extends DiffElement {\n  static get properties() {\n    return {\n      inContainer: { type: Boolean },\n      containerIndex: { type: Number },\n      containerItems: { type: Number },\n      containerSections: { type: String },\n      isHovered: { type: Boolean }\n    };\n  }\n\n  constructor() {\n    super();\n    this.inContainer = false;\n    this.containerIndex = 0;\n    this.containerItems = 0;\n    this.containerSections = false;\n    this.addEventListener(\"containerUpdate\", event => {\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      event.preventDefault();\n      this.containerUpdate(event);\n    });\n\n    this.addEventListener(\"mouseover\", event => {\n      this.isHovered = true;\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      event.preventDefault();\n    });\n\n    this.addEventListener(\"mouseout\", event => {\n      this.isHovered = false;\n    });\n  }\n\n  get containerFirst() {\n    return this.containerIndex === 0;\n  }\n\n  get containerLast() {\n    return this.containerIndex === this.containerItems - 1;\n  }\n\n  containerUpdate({\n    detail: { inContainer, containerSections, containerIndex, containerItems }\n  }) {\n    this.inContainer = inContainer;\n    this.containerSections = containerSections;\n    this.containerIndex = containerIndex;\n    this.containerItems = containerItems;\n  }\n\n  render() {\n    const upButton = html`\n      <button\n        class=\"up${this.containerFirst ? \" disabled\" : \"\"}\"\n        @click=\"${() => this.upHandler()}\"\n      >\n        ${svg([iconUp])}\n      </button>\n    `;\n\n    const downButton = html`\n      <button\n        class=\"up${this.containerLast ? \" disabled\" : \"\"}\"\n        @click=\"${() => this.downHandler()}\"\n      >\n        ${svg([iconDown])}\n      </button>\n    `;\n\n    return html`\n      <div class=\"${this.isHovered ? \"hovered\" : \"\"}\">\n        ${this.inContainer\n          ? html`\n              <ck-placeholder\n                collapsed=\"true\"\n                @ckEditorOperation=\"${event => this.insertHandler(event)}\"\n                sections=\"${this.containerSections}\"\n              ></ck-placeholder>\n              ${this.added || this.removed\n                ? null\n                : html`\n                    <div class=\"controls\">\n                      ${upButton} ${downButton}\n                      <button\n                        class=\"remove\"\n                        @click=\"${() => this.removeHandler()}\"\n                      >\n                        ${svg([iconDelete])}\n                      </button>\n                    </div>\n                  `}\n            `\n          : null}\n        <div class=\"${this.inContainer ? \"item\" : \"\"}\">\n          ${super.render(\n            html`\n              <slot></slot>\n            `\n          )}\n        </div>\n      </div>\n    `;\n  }\n\n  upHandler() {\n    if (!this.containerFirst) {\n      const diff =\n        global.window.scrollY +\n        this.parentElement.children[this.containerIndex - 1].offsetTop -\n        this.offsetTop;\n      window.scrollTo(0, diff);\n      this.dispatchEvent(\n        Operations.move(\n          this.parentElement,\n          \"before\",\n          this.containerIndex,\n          this.containerIndex - 1\n        )\n      );\n    }\n  }\n\n  downHandler() {\n    if (!this.containerLast) {\n      const diff =\n        global.window.scrollY +\n        (this.containerIndex < this.containerItems - 2\n          ? this.parentElement.children[this.containerIndex + 2].offsetTop -\n            this.parentElement.children[this.containerIndex + 1].offsetTop\n          : this.parentElement.children[this.containerIndex + 1].offsetHeight);\n      window.scrollTo(0, diff);\n      this.dispatchEvent(\n        Operations.move(\n          this.parentElement,\n          \"after\",\n          this.containerIndex,\n          this.containerIndex + 1\n        )\n      );\n    }\n  }\n\n  removeHandler() {\n    this.dispatchEvent(Operations.remove(this));\n  }\n\n  insertHandler(event) {\n    this.dispatchEvent(\n      Operations.insert(\n        event.detail.element,\n        this.parentElement,\n        \"before\",\n        this.containerIndex\n      )\n    );\n  }\n}\n\nContainerItem.styles = css([itemStyles]);\n\nexport default class Container extends LitElement {\n  static get properties() {\n    return {\n      sections: { type: String }\n    };\n  }\n\n  constructor() {\n    super();\n    this.observer = null;\n    this.observer = new MutationObserver(() => this.processChildren());\n    this.observer.observe(this, {\n      attributes: false,\n      childList: true,\n      subtree: false\n    });\n  }\n\n  firstUpdated() {\n    this.processChildren();\n  }\n\n  processChildren() {\n    Array.from(this.children).forEach((child, index) => {\n      child.dispatchEvent(\n        new CustomEvent(\"containerUpdate\", {\n          detail: {\n            inContainer: true,\n            containerSections: this.sections,\n            containerIndex: index,\n            containerItems: this.children.length\n          }\n        })\n      );\n    });\n  }\n\n  render() {\n    return html`\n      <div class=\"container\"><slot></slot></div>\n      <ck-placeholder\n        @ckEditorOperation=\"${this.appendHandler}\"\n        closed=\"true\"\n        sections=\"${this.sections}\"\n      >\n      </ck-placeholder>\n    `;\n  }\n\n  appendHandler(event) {\n    this.dispatchEvent(Operations.insert(event.detail.element, this, \"end\"));\n  }\n}\n\ncustomElement(\"ck-container\")(Container);\ncustomElement(\"ck-container-item\")(ContainerItem);\n","import { LitElement, html, svg } from \"lit-element\";\nimport * as Operations from \"../editor/operations\";\nimport styles from \"./gallery.css\";\n\nimport leftIcon from \"./icons/leftArrow.svg\";\nimport rightIcon from \"./icons/rightArrow.svg\";\nimport trashIcon from \"./icons/trash.svg\";\n\nclass Gallery extends LitElement {\n  static get properties() {\n    return {\n      items: Array,\n      currentGallery: Number,\n      section: String\n    };\n  }\n\n  constructor() {\n    super();\n    this.items = [];\n    this.currentGallery = 0;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    const slots = this.shadowRoot;\n    slots.addEventListener(\"slotchange\", e => {\n      this.items = Array.from(this.children).map((child, index) => ({\n        title: index + 1,\n        index\n      }));\n    });\n\n    this.items = Array.from(this.children).map((child, index) => ({\n      title: index + 1,\n      index\n    }));\n    this.setGalleryItem(this.currentGallery);\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n\n      <div class=\"ck-gallery\">\n        <div\n          class=\"ck-gallery__rail\"\n          style=\"transform: translateX(${this.currentGallery * -100}%)\"\n        >\n          <slot></slot>\n        </div>\n\n        <div class=\"ck-gallery__controls\">\n          <div class=\"ck-gallery__pager\">\n            <div class=\"ck-gallery__dots\">\n              ${this.items.map(item => this.button(item))}\n              <span @click=\"${() => this.addItem()}\" class=\"ck-gallery__add\">\n                +\n              </span>\n            </div>\n          </div>\n          <div class=\"ck-gallery__actions\">\n            <span>Edit active element</span>\n            <div class=\"ck-gallery__icons\">\n              <div\n                @click=\"${() => this.moveItem(\"left\")}\"\n                data-tooltip=\"Move element to the left\"\n                class=\"ck-gallery__icon ck-gallery__icon--arrow-left ${this\n                  .currentGallery === 0\n                  ? \"disabled\"\n                  : \"\"}\"\n              >\n                ${svg([leftIcon])}\n              </div>\n              <div\n                @click=\"${() => this.moveItem(\"right\")}\"\n                data-tooltip=\"Move element to the right\"\n                class=\"ck-gallery__icon ck-gallery__icon--arrow-right ${this\n                  .currentGallery ===\n                this.items.length - 1\n                  ? \"disabled\"\n                  : \"\"}\"\n              >\n                ${svg([rightIcon])}\n              </div>\n              <div\n                @click=\"${() => this.deleteItem()}\"\n                data-tooltip=\"Delete slide\"\n                class=\"ck-gallery__icon ck-gallery__icon--arrow-trash ${this\n                  .items.length < 2\n                  ? \"disabled\"\n                  : \"\"}\"\n              >\n                ${svg([trashIcon])}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  addItem() {\n    this.dispatchEvent(Operations.insert(this.section, this, \"end\"));\n    this.currentGallery = this.items.length;\n  }\n\n  deleteItem() {\n    if (this.items.length >= 2) {\n      this.dispatchEvent(Operations.remove(this.children[this.currentGallery]));\n      if (this.currentGallery === this.items.length - 1) {\n        this.currentGallery -= 1;\n      }\n    }\n  }\n\n  moveItem(position) {\n    if (position === \"left\" && this.currentGallery !== 0) {\n      this.dispatchEvent(\n        Operations.move(\n          this,\n          \"before\",\n          this.currentGallery,\n          this.currentGallery - 1\n        )\n      );\n      this.currentGallery -= 1;\n    }\n    if (position === \"right\" && this.currentGallery !== this.items.length - 1) {\n      this.dispatchEvent(\n        Operations.move(\n          this,\n          \"before\",\n          this.currentGallery,\n          this.currentGallery + 1\n        )\n      );\n      this.currentGallery += 1;\n    }\n  }\n\n  button(item) {\n    return html`\n      <span\n        @click=\"${() => this.setGalleryItem(item.index)}\"\n        class=\"ck-gallery__dot-item ${this.currentGallery === item.index\n          ? \"active\"\n          : \"\"}\"\n        >${item.title}</span\n      >\n    `;\n  }\n\n  setGalleryItem(index) {\n    if (this.children.length <= index || !this.children[index]) {\n      return;\n    }\n\n    // Update image slide\n    this.currentGallery = index;\n  }\n}\n\ncustomElements.define(\"ck-gallery\", Gallery);\n","import { LitElement, html, css } from \"lit-element\";\nimport * as Operations from \"../editor/operations\";\nimport styles from \"./diffelement.css\";\n\nexport default class DiffElement extends LitElement {\n  static get properties() {\n    return {\n      added: { type: Boolean },\n      removed: { type: Boolean }\n    };\n  }\n\n  constructor() {\n    super();\n    this.added = false;\n    this.removed = false;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  handleAccept() {\n    if (this.added) {\n      this.dispatchEvent(Operations.removeAttribute(this, \"added\"));\n    } else {\n      this.dispatchEvent(Operations.remove(this));\n    }\n  }\n\n  handleDecline() {\n    if (this.removed) {\n      this.dispatchEvent(Operations.removeAttribute(this, \"removed\"));\n    } else {\n      this.dispatchEvent(Operations.remove(this));\n    }\n  }\n\n  render(children) {\n    if (this.added || this.removed) {\n      return html`\n        <style>\n          ${styles}\n        </style>\n        <div class=\"overlay ${this.added ? \"added\" : \"removed\"}\">\n          ${children}\n          <div class=\"overlay__background\">\n            <div class=\"actions\">\n              <button class=\"accept\" @click=${this.handleAccept.bind(this)}>\n                Accept\n              </button>\n              <button class=\"decline\" @click=${this.handleDecline.bind(this)}>\n                Decline\n              </button>\n            </div>\n          </div>\n        </div>\n      `;\n    }\n    return children;\n  }\n}\n\nDiffElement.styles = css([styles]);\n","import { LitElement, html, svg } from \"lit-element\";\nimport styles from \"./button.css\";\n\nconst iconLink = svg`\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\n    <path d=\"M7.8 24c0-3.42 2.78-6.2 6.2-6.2h8V14h-8C8.48 14 4 18.48 4 24s4.48 10 10 10h8v-3.8h-8c-3.42 0-6.2-2.78-6.2-6.2zm8.2 2h16v-4H16v4zm18-12h-8v3.8h8c3.42 0 6.2 2.78 6.2 6.2s-2.78 6.2-6.2 6.2h-8V34h8c5.52 0 10-4.48 10-10s-4.48-10-10-10z\"/>\n</svg>\n`;\n\nconst iconLinkOff = svg`\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n  <path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M17 7h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1 0 1.43-.98 2.63-2.31 2.98l1.46 1.46C20.88 15.61 22 13.95 22 12c0-2.76-2.24-5-5-5zm-1 4h-2.19l2 2H16zM2 4.27l3.11 3.11C3.29 8.12 2 9.91 2 12c0 2.76 2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1 0-1.59 1.21-2.9 2.76-3.07L8.73 11H8v2h2.73L13 15.27V17h1.73l4.01 4L20 19.74 3.27 3 2 4.27z\"/><path fill=\"none\" d=\"M0 24V0\"/>\n</svg>\n`;\n\nclass Button extends LitElement {\n  static get properties() {\n    return {\n      target: { type: String, attribute: \"link-target\" }\n    };\n  }\n\n  constructor() {\n    super();\n    this.target = null;\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n      <div class=\"button\">\n        <div class=\"button__content\">\n          <slot></slot>\n        </div>\n        <button @click=\"${this.selectLink}\">\n          ${this.target ? iconLink : iconLinkOff}\n        </button>\n      </div>\n    `;\n  }\n\n  selectLink() {\n    this.dispatchEvent(new CustomEvent(\"selectLink\", { detail: this.target }));\n  }\n}\n\ncustomElements.define(\"ck-button\", Button);\n","import { LitElement, html } from \"lit-element\";\nimport styles from \"./media.css\";\n\nconst mediaLoader = html`\n  <div class=\"ck-media__loader\">\n    <div class=\"ck-media__spinner\">\n      <div class=\"ck-media__bounce ck-media__bounce--1\"></div>\n      <div class=\"ck-media__bounce ck-media__bounce--2\"></div>\n      <div class=\"ck-media__bounce ck-media__bounce--3\"></div>\n    </div>\n  </div>\n`;\n\nexport default class Media extends LitElement {\n  static get properties() {\n    return {\n      loaderIsVisible: Boolean,\n      mediaUuid: { attribute: \"data-media-uuid\", type: String },\n      mediaDisplay: { attribute: \"data-media-display\", type: String },\n      preview: String\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  updated(properties) {\n    this.previewPane = this.shadowRoot.querySelector(\".ck-media__preview\");\n    if (properties.has(\"mediaUuid\") && this.mediaUuid) {\n      this.loaderIsVisible = true;\n      Media.previewCallback(this.mediaUuid, this.mediaDisplay, preview => {\n        this.preview = preview;\n        this.loaderIsVisible = false;\n      });\n    }\n\n    if (properties.has(\"preview\") && this.preview) {\n      this.previewPane.innerHTML = this.preview;\n    }\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n      <div class=\"ck-media\">\n        <div\n          class=\"ck-media__preview ${this.preview ? \"visible\" : \"hidden\"}\"\n        ></div>\n        <div\n          class=\"ck-media__placeholder ${this.preview ? \"hidden\" : \"visible\"}\"\n        ></div>\n        ${this.loaderIsVisible ? mediaLoader : null}\n      </div>\n    `;\n  }\n}\n\nMedia.previewCallback = (uuid, display, callback) =>\n  window.setTimeout(() => {\n    callback(`<img src=\"https://placekitten.com/500/${uuid}\" />`);\n  }, 3000);\n\ncustomElements.define(\"ck-media\", Media);\n","import { LitElement, html, svg } from \"lit-element\";\nimport { render } from \"lit-html\";\nimport * as Operations from \"../editor/operations\";\nimport styles from \"./tabs.css\";\nimport modalStyles from \"./modal.css\";\nimport editIcon from \"./icons/pencil.svg\";\n\nclass Tabs extends LitElement {\n  static get properties() {\n    return {\n      section: String,\n      items: Array,\n      currentTab: Number,\n      modalIsOpen: Boolean\n    };\n  }\n\n  constructor() {\n    super();\n    this.items = [];\n    this.currentTab = -1;\n    this.modalIsOpen = false;\n    this.section = null;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.ownerDocument.body.querySelector(\"#ck-tabs-modal\")) {\n      this.modal = this.ownerDocument.body.querySelector(\"#ck-tabs-modal\");\n    } else {\n      this.modal = this.ownerDocument.createElement(\"div\");\n      this.modal.setAttribute(\"id\", \"ck-tabs-modal\");\n      this.ownerDocument.body.appendChild(this.modal);\n    }\n\n    const observer = new MutationObserver(() => this.processItems());\n    observer.observe(this, {\n      attributes: true,\n      childList: true,\n      subtree: true\n    });\n\n    this.processItems();\n\n    if (this.children.length > 0) {\n      this.currentTab = 0;\n    }\n  }\n\n  processItems() {\n    this.items = Array.from(this.children).map((child, index) => {\n      return {\n        title:\n          (child.dataset.titleAttribute\n            ? child.getAttribute(child.dataset.titleAttribute)\n            : null) ||\n          child.dataset.tabTitle ||\n          \"Untitled Tab\",\n        default: child.dataset.defaultTab,\n        index\n      };\n    });\n    this.setTabsItem(this.currentTab);\n  }\n\n  openModal() {\n    this.modalIsOpen = true;\n    render(this.renderModal(), this.modal);\n  }\n\n  closeModal() {\n    this.modalIsOpen = false;\n    render(this.renderModal(), this.modal);\n  }\n\n  renderModal() {\n    return html`\n      <ck-tabs-modal\n        @eventCloseModal=\"${() => {\n          this.closeModal();\n        }}\"\n        @eventSaveModal=\"${e => {\n          this.updateItem(e.detail);\n        }}\"\n        @deleteTab=\"${() => this.deleteItem()}\"\n        currentTitle=\"${this.items[this.currentTab].title}\"\n        currentDefault=\"${this.items[this.currentTab].default}\"\n        currentIndex=\"${this.currentTab}\"\n        data-visible=\"${this.modalIsOpen ? \"true\" : \"false\"}\"\n      >\n      </ck-tabs-modal>\n    `;\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n      <div class=\"ck-tabs\">\n        <div class=\"ck-tabs__header\">\n          <ul class=\"ck-tabs__header-tab-list\">\n            ${this.items.map(item => this.tabTitle(item))}\n            <li\n              @click=\"${() => this.addItem()}\"\n              class=\"ck-tabs__header-tab-add\"\n            ></li>\n          </ul>\n        </div>\n        <div class=\"ck-tabs__content\">\n          <div\n            class=\"ck-tabs__rail\"\n            style=\"transform: translateX(${this.currentTab * -100}%)\"\n          >\n            <slot></slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  tabTitle(item) {\n    return html`\n      <li\n        @click=\"${() => this.setTabsItem(item.index)}\"\n        class=\"ck-tabs__header-tab-item ${this.currentTab === item.index\n          ? \"active\"\n          : \"\"}\n        ${item.default === \"true\" ? \"default\" : \"\"}\"\n      >\n        ${item.title}\n        <span\n          @click=\"${() => this.openModal(item)}\"\n          class=\"ck-tabs__header-icon\"\n        >\n          ${svg([editIcon])}\n        </span>\n      </li>\n    `;\n  }\n\n  deleteItem() {\n    if (this.items.length >= 2) {\n      this.dispatchEvent(Operations.remove(this.children[this.currentTab]));\n      if (this.currentTab === this.items.length - 1) {\n        this.currentTab -= 1;\n      }\n    }\n  }\n\n  setTabsItem(index) {\n    if (this.children.length <= index || !this.children[index]) {\n      return;\n    }\n    this.currentTab = index;\n  }\n\n  addItem() {\n    this.currentTab = this.items.length;\n    this.dispatchEvent(\n      Operations.insert(this.section, this, \"end\", null, {\n        \"data-default-tab\":\n          Array.from(this.children).filter(\n            child => child.dataset.defaultTab === \"true\"\n          ).length === 0,\n        \"data-tab-title\": \"Untitled Tab\"\n      })\n    );\n  }\n\n  updateItem(item) {\n    this.dispatchEvent(\n      Operations.batch(\n        [\n          Operations.attributes(this.children[item.index], {\n            \"data-tab-title\": item.title,\n            \"data-default-tab\": item.default\n          })\n        ].concat(\n          item.default\n            ? Array.from(this.children)\n                .filter(\n                  child =>\n                    child.dataset.defaultTab === \"true\" &&\n                    child !== this.children[item.index]\n                )\n                .map(child =>\n                  Operations.attributes(child, { \"data-default-tab\": \"false\" })\n                )\n            : []\n        )\n      )\n    );\n  }\n}\n\nclass Modal extends LitElement {\n  static get properties() {\n    return {\n      isVisible: { type: Boolean, reflect: true },\n      inputText: String,\n      items: Array,\n      isDefault: Boolean,\n      currentDefault: String,\n      currentIndex: String,\n      currentTitle: String\n    };\n  }\n\n  constructor() {\n    super();\n    this.isVisible = false;\n    this.inputText = \"\";\n    this.isDefault = false;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const self = this;\n    const observer = new MutationObserver(mutationsList => {\n      mutationsList.forEach(mutation => {\n        if (mutation.type === \"attributes\") {\n          if (self.dataset.visible === \"true\") {\n            self.isVisible = true;\n            self.isDefault = self.currentDefault === \"true\";\n            self.inputText = self.currentTitle;\n          }\n        }\n      });\n    });\n\n    observer.observe(self, {\n      attributes: true,\n      childList: true,\n      subtree: false\n    });\n\n    self.isDefault = self.currentDefault === \"true\";\n    self.isVisible = self.dataset.visible === \"true\";\n  }\n\n  closeModal() {\n    this.dispatchEvent(new Event(\"eventCloseModal\"));\n    this.isVisible = false;\n  }\n\n  handleInput(e) {\n    this.inputText = e.target.value;\n  }\n\n  saveModal() {\n    const response = {\n      index: this.currentIndex,\n      title: this.inputText,\n      default: this.isDefault\n    };\n    this.dispatchEvent(new CustomEvent(\"eventSaveModal\", { detail: response }));\n    this.closeModal();\n  }\n\n  handleSwitch(e) {\n    this.isDefault = e.target.checked;\n  }\n\n  deleteTab() {\n    this.dispatchEvent(\n      new CustomEvent(\"deleteTab\", { detail: this.currentTab })\n    );\n    this.closeModal();\n  }\n\n  render() {\n    return html`\n      <style>\n        ${modalStyles}\n      </style>\n      <div class=\"modal ${this.isVisible ? \"visible\" : \"\"}\">\n        <div class=\"modal__item\">\n          <h3 class=\"modal__title\">Edit tab</h3>\n          <div class=\"modal__content\">\n            <label class=\"modal__label\" for=\"${this.currentIndex}\">\n              Variation name\n            </label>\n            <input\n              class=\"modal__input\"\n              id=\"${this.currentIndex}\"\n              @input=${this.handleInput}\n              .value=${this.currentTitle}\n            />\n            <div class=\"modal__toggle\">\n              <label class=\"switch\">\n                <input\n                  type=\"checkbox\"\n                  .checked=\"${this.isDefault}\"\n                  @input=\"${e => this.handleSwitch(e)}\"\n                />\n                <span class=\"slider\"></span>\n              </label>\n              <span class=\"modal__toggle-label\">Set as default</span>\n            </div>\n          </div>\n          <div class=\"modal__actions\">\n            <div class=\"modal__action-wrap-delete\">\n              <span\n                class=\"modal__action modal__action--delete\"\n                @click=\"${() => this.deleteTab()}\"\n              >\n                Delete\n              </span>\n            </div>\n            <span class=\"modal__action\" @click=\"${() => this.closeModal()}\">\n              Cancel\n            </span>\n            <span\n              class=\"modal__action modal__action--primary\"\n              @click=\"${() => this.saveModal()}\"\n            >\n              save\n            </span>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define(\"ck-tabs\", Tabs);\ncustomElements.define(\"ck-tabs-modal\", Modal);\n","import { storiesOf } from \"@storybook/html\";\nimport \"./text_conflict\";\nimport \"./text_conflict_option/text_conflict_option\";\nimport Editor from \"../editor/editor\";\n\nstoriesOf(\"Text Conflict\", module)\n  .addDecorator(Editor.decorator)\n  .add(\"Default\", () => `\n  <ck-conflict-text>\n    <ck-conflict-option from=\"source\"><p>Source version</p></ck-conflict-option>\n    <ck-conflict-option from=\"left\"><p>Left version</p></ck-conflict-option>\n    <ck-conflict-option from=\"right\"><p>Right version</p></ck-conflict-option>\n    <ck-conflict-option from=\"empty\"><p></p></ck-conflict-option>\n  </ck-conflict-text>\n  `);\n","import { LitElement, html } from \"lit-element\";\nimport * as Operations from \"../editor/operations\";\nimport styles from \"./text_conflict.css\";\n\nclass TextConflict extends LitElement {\n  static get properties() {\n    return {\n      label: { type: String },\n      resolved: { type: Boolean },\n      isResolving: { type: Boolean }\n    };\n  }\n\n  constructor() {\n    super();\n    this.label = TextConflict.label;\n    this.resolved = false;\n    this.isResolving = false;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const children = Array.from(this.children);\n\n    children.forEach(item =>\n      item.addEventListener(\n        \"optionSelected\",\n        this.selectOptionHandler.bind(this)\n      )\n    );\n\n    // Click outside handler.\n    document.addEventListener(\"click\", e => {\n      if (!this.contains(e.target) && this.isResolving) {\n        this.isResolving = false;\n      }\n    });\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n      <div class=\"text-conflict\">\n        <span\n          class=\"text-conflict__label ${!this.resolved ? \"resolve\" : \"\"}\"\n          @click=${this.clickResolvingHandler}\n          >${this.label}</span\n        >\n        <div\n          class=\"text-conflict__options ${this.isResolving ? \"visible\" : \"\"}\"\n        >\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  clickResolvingHandler() {\n    this.isResolving = true;\n  }\n\n  selectOptionHandler(event) {\n    this.resolved = true;\n    this.isResolving = false;\n    console.log(this, event.detail);\n    this.dispatchEvent(Operations.swap(event.detail, this));\n  }\n}\n\nTextConflict.label = \"Conflict needs resolving\";\n\ncustomElements.define(\"ck-conflict-text\", TextConflict);\n","import { LitElement, html } from \"lit-element\";\nimport styles from \"./text_conflict_option.css\";\n\nclass TextConflictOption extends LitElement {\n  static get properties() {\n    return {\n      from: { type: String },\n      content: { type: String }\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // TODO: Keep span markup, but drop block elements.\n    this.content = this.innerText;\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n      <div class=\"option\" @click=\"${this.optionSelected}\">\n        <span class=\"option__label\"\n          >${TextConflictOption.labels[this.from]}</span\n        >\n        <span class=\"option__content\">${this.content}</span>\n      </div>\n    `;\n  }\n\n  optionSelected() {\n    this.dispatchEvent(\n      new CustomEvent(\"optionSelected\", {\n        detail: this.children.item(0)\n      })\n    );\n  }\n}\n\nTextConflictOption.labels = {\n  left: \"Left version\",\n  right: \"Right version\",\n  source: \"Source version\",\n  empty: \"Clear\"\n};\n\ncustomElements.define(\"ck-conflict-option\", TextConflictOption);\n","import { LitElement, html, css } from \"lit-element\";\nimport styles from \"./textfield.css\";\n\nexport default class TextField extends LitElement {\n  static get properties() {\n    return {\n      pattern: { attribute: \"ck-pattern\", type: String },\n      hasPatternError: { type: Boolean },\n      errorMessage: { attribute: \"ck-error-message\", type: String },\n      minLength: { attribute: \"ck-min\", type: Number },\n      maxLength: { attribute: \"ck-max\", type: Number },\n      hasLengthError: { type: Boolean },\n      hasHelper: { type: Boolean },\n      helper: { attribute: \"ck-message-helper\", type: String }\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n\n    this.querySelectorAll([\"[contenteditable]\"]).forEach(el => {\n      const observer = new MutationObserver(this.validate);\n      observer.observe(el, {\n        childList: true,\n        subtree: true,\n        characterData: true\n      });\n\n      el.addEventListener(\"focus\", this.setHelper.bind(this));\n      el.addEventListener(\"blur\", () => {\n        this.validate();\n        this.hasHelper = false;\n      });\n\n      if (this.maxLength && !this.minLength) {\n        el.addEventListener(\"input\", this.handleMax.bind(this));\n      }\n      if (this.maxLength && this.minLength) {\n        el.addEventListener(\"input\", this.rangeValidation.bind(this));\n      }\n    });\n\n    // textfield errors immediately highlighted\n    if (TextField.initializeWithErrors) this.validate();\n  }\n\n  handleMax() {\n    this.helper = `${this.maxLength -\n      this.innerText.length} letters remaining.`;\n    this.setHelper();\n    this.maxValidation();\n  }\n\n  validate() {\n    if (!this.innerText) return;\n    // MAX\n    if (this.hasAttribute(\"ck-max\")) this.maxValidation();\n    // MIN\n    if (this.hasAttribute(\"ck-min\")) this.minValidation();\n    // Range\n    if (this.hasAttribute(\"ck-max\") && this.hasAttribute(\"ck-min\"))\n      this.rangeValidation();\n    // Pattern\n    if (this.hasAttribute(\"ck-pattern\")) this.patternValidation();\n  }\n\n  maxValidation() {\n    if (this.innerText.length > this.maxLength && !this.minLength) {\n      if (!this.errorMessage) {\n        this.errorMessage = `Please enter no more than \n          ${this.maxLength} letters.`;\n      }\n      this.hasLengthError = true;\n    } else {\n      this.hasLengthError = false;\n    }\n    this.setHelper();\n  }\n\n  minValidation() {\n    if (this.innerText.length < this.minLength) {\n      if (!this.errorMessage) {\n        this.errorMessage = `Please enter at least \n          ${this.minLength} letters.`;\n      }\n      this.hasLengthError = true;\n    } else {\n      this.hasLengthError = false;\n    }\n  }\n\n  rangeValidation() {\n    if (\n      this.innerText.length > this.minLength &&\n      this.innerText.length < this.maxLength\n    ) {\n      this.hasLengthError = false;\n    } else {\n      if (!this.errorMessage) {\n        this.errorMessage = `Please enter ${this.minLength} to ${\n          this.maxLength\n        } letters.`;\n      }\n      this.hasLengthError = true;\n    }\n  }\n\n  patternValidation() {\n    const pattern = new RegExp(this.pattern);\n    if (pattern.test(this.innerText)) {\n      this.hasPatternError = false;\n    } else {\n      this.hasPatternError = true;\n    }\n  }\n\n  setHelper() {\n    if (this.helper) {\n      if (!this.hasPatternError && !this.hasLengthError) {\n        this.hasHelper = true;\n      } else {\n        this.hasHelper = false;\n      }\n    }\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n\n      <div\n        class=\"ck-textfield ${this.hasPatternError || this.hasLengthError\n          ? \"error\"\n          : \"\"}\"\n      >\n        ${this.hasHelper\n          ? html`\n              <div class=\"ck-tooltip ck-tooltip--helper\">${this.helper}</div>\n            `\n          : null}\n        ${this.hasLengthError\n          ? html`\n              <div class=\"ck-tooltip ck-tooltip--error\">\n                ${this.errorMessage ? this.errorMessage : \"Length error\"}\n              </div>\n            `\n          : null}\n        ${this.hasPatternError\n          ? html`\n              <div class=\"ck-tooltip ck-tooltip--error\">\n                ${this.errorMessage ? this.errorMessage : \"Pattern error\"}\n              </div>\n            `\n          : null}\n        <div\n          class=\"${this.hasPatternError || this.hasLengthError\n            ? \"is-valid\"\n            : \"is-invalid\"}\"\n        >\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n}\n\n// Static flag if textfield errors should be highlighted immediately.\n// If set to false, errors are highlighted after focus is lost for the first time.\nTextField.initializeWithErrors = false;\n\nwindow.customElements.define(\"ck-textfield\", TextField);\n","import { LitElement, html, svg } from \"lit-element\";\nimport * as Operations from \"../editor/operations\";\nimport styles from \"./placeholder.css\";\n\nimport closeIcon from \"./icons/close.svg\";\nimport carouselIcon from \"./icons/carousel.svg\";\nimport formattedTextIcon from \"./icons/formatted-text.svg\";\nimport imageIcon from \"./icons/image.svg\";\nimport miscIcon from \"./icons/misc.svg\";\nimport textIcon from \"./icons/text.svg\";\nimport textMediaIcon from \"./icons/text-media.svg\";\nimport videoIcon from \"./icons/video.svg\";\n\nconst icons = {\n  close: closeIcon,\n  formatted_text: formattedTextIcon,\n  carousel: carouselIcon,\n  image: imageIcon,\n  misc: miscIcon,\n  text: textIcon,\n  text_media: textMediaIcon,\n  video: videoIcon\n};\n\nfunction icon(section) {\n  if (section.svgIcon) {\n    return svg([section.svgIcon]);\n  }\n  if (icons[section.icon]) {\n    return svg([icons[section.icon]]);\n  }\n  return svg([icons.misc]);\n}\n\nexport default class Placeholder extends LitElement {\n  static get properties() {\n    return {\n      collapsed: { type: Boolean },\n      closed: { type: Boolean },\n      isOpen: { type: Boolean },\n      isExpanded: { type: Boolean },\n      sections: { type: String },\n      labelOpen: { type: String },\n      labelExpand: { type: String }\n    };\n  }\n\n  constructor() {\n    super();\n    this.closed = false;\n    this.collapsed = false;\n    this.labelOpen = \"Add\";\n    this.labelExpand = \"Insert\";\n    this.sections = [];\n    this.isOpen = false;\n    this.isExpanded = false;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  getSections() {\n    return Placeholder.availableSections.filter(section =>\n      this.sections.split(\" \").includes(section.id)\n    );\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n      ${!this.collapsed || this.isExpanded\n        ? html`\n            <div class=\"ck-placeholder__add-wrapper\">\n              ${this.closed\n                ? html`\n                    <button\n                      @click=\"${this.clickOpenHandler}\"\n                      type=\"button\"\n                      class=\"normalize-button ck-placeholder__add-button\"\n                    >\n                      ${this.labelOpen}\n                    </button>\n                  `\n                : null}\n              ${!this.closed || this.isOpen\n                ? html`\n                    <ul class=\"normalize-list ck-placeholder__sections-list\">\n                      ${this.getSections().map(\n                        section => html`\n                          <li class=\"ck-placeholder__section-item\">\n                            <button\n                              @click=\"${event =>\n                                this.clickSectionHandler(event, section.id)}\"\n                              type=\"button\"\n                              class=\"normalize-button ck-placeholder__section-button\"\n                            >\n                              <div class=\"ck-placeholder__icon-wrapper\">\n                                ${icon(section)}\n                              </div>\n                              ${section.label}\n                            </button>\n                          </li>\n                        `\n                      )}\n                    </ul>\n                    ${this.isOpen\n                      ? html`\n                          <button\n                            @click=\"${this.clickCloseHandler}\"\n                            type=\"button\"\n                            class=\"normalize-button ck-placeholder__close-button\"\n                          >\n                            <div class=\"ck-placeholder__icon-wrapper\">\n                              ${icon({ icon: \"close\" })}\n                            </div>\n                            <span class=\"ck-placeholder__close-button-label\"\n                              >Close</span\n                            >\n                          </button>\n                        `\n                      : null}\n                  `\n                : \"\"}\n            </div>\n          `\n        : html`\n            <div class=\"ck-placeholder__insert-wrapper\">\n              <button\n                @click=\"${this.clickExpandHandler}\"\n                type=\"button\"\n                class=\"normalize-button ck-placeholder__insert-button\"\n              >\n                ${this.labelExpand}\n              </button>\n            </div>\n          `}\n    `;\n  }\n\n  clickOpenHandler() {\n    this.isOpen = !this.isOpen;\n  }\n\n  clickExpandHandler() {\n    this.isExpanded = !this.isExpanded;\n  }\n\n  clickCloseHandler() {\n    this.isOpen = false;\n  }\n\n  clickSectionHandler(event, sectionId) {\n    this.dispatchEvent(Operations.replace(sectionId, this));\n    this.isExpanded = false;\n  }\n}\n\ncustomElements.define(\"ck-placeholder\", Placeholder);\n"],"mappings":"AAAA;;AAiCA;;AC+BA;AACA;;AAEA;;AAIA;;AAEA;AACA;;AAEA;;AAIA;AACA;AACA;;;AAIA;AACA;;AAEA;;AAIA;;;AAGA;;AAEA;;;;AAKA;AACA;AACA;;;;;AAUA;;;AAiGA;;AAEA;;;AAMA;;AChLA;;;;;;AAMA;;;;;;;;AAQA;AACA;;;;;;;;;AASA;;AAGA;;AAIA;;;AAGA;;AAEA;;AAMA;;;AAGA;;AAEA;;AAKA;;;;;;AASA;;AA0CA;AACA;AAGA;;AAKA;;AClHA;;AAEA;AACA;;;AAGA;;;AAGA;;;;;;AAQA;;;;AClDA;;;;AAuCA;;AAlBA;;;;;;AAMA;AACA;;;AAMA;;;;;;;;AC9BA;;AAgCA;;;;AAIA;;;AAGA;;AAEA;;AAMA;;ACkBA;AAGA;AAGA;AACA;AACA;AACA;AACA;;;AAMA;;AAGA;;;;;AAKA;;AAEA;;;;;;;;AAQA;;;;;;AASA;;AAGA;AACA;AAGA;;AAEA;;AAEA;;;AAGA;;;AAMA;;AAqIA;;AAEA;;;;AAIA;;;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;;;;;;;;;;;AAWA;;;;;AAKA;;;;;AAKA;;;;;;;AC3TA;;AC0CA;;;;AAIA;AACA;AACA;;;AAGA;;;;;AAQA;;ACvCA;;AAEA;;AAEA;;AAEA;;AAKA;;ACmGA;;;;AAIA;;AAIA;AAEA;AAEA;AACA;;AAGA;;AAGA;AACA;;AAGA;;AAGA;;AAEA;;;;;AAaA;;ACpGA;;AAEA;;AAGA;;AAGA;;;;AAIA;;AAGA;AACA;;AAGA;;;AAIA;;;;;AAMA;;AAEA;;;;;AAMA;;AAGA;;;;;AAKA;;;;;;AAOA;AAEA;;AAGA;;;AAGA;;;;AAIA;;;;AAOA","sourceRoot":""}